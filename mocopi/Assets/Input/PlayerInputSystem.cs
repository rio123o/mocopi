//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.11.2
//     from Assets/Input/PlayerInputSystem.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @PlayerInputSystem: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @PlayerInputSystem()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""PlayerInputSystem"",
    ""maps"": [
        {
            ""name"": ""PlayerBoxMove"",
            ""id"": ""98a5db66-2a0d-4da4-b7b7-a5275e475a8b"",
            ""actions"": [
                {
                    ""name"": ""Move"",
                    ""type"": ""Value"",
                    ""id"": ""8de640bd-7304-44e6-8648-895b72a53913"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""2D Vector"",
                    ""id"": ""7cdd8330-f532-422f-8825-05a7a39727b3"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""left"",
                    ""id"": ""4bbec205-d083-4ba3-8e39-9031c7e0144c"",
                    ""path"": ""<Keyboard>/leftArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""07dba192-78f5-4e87-acce-4d6c51167b8c"",
                    ""path"": ""<Keyboard>/rightArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // PlayerBoxMove
        m_PlayerBoxMove = asset.FindActionMap("PlayerBoxMove", throwIfNotFound: true);
        m_PlayerBoxMove_Move = m_PlayerBoxMove.FindAction("Move", throwIfNotFound: true);
    }

    ~@PlayerInputSystem()
    {
        UnityEngine.Debug.Assert(!m_PlayerBoxMove.enabled, "This will cause a leak and performance issues, PlayerInputSystem.PlayerBoxMove.Disable() has not been called.");
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // PlayerBoxMove
    private readonly InputActionMap m_PlayerBoxMove;
    private List<IPlayerBoxMoveActions> m_PlayerBoxMoveActionsCallbackInterfaces = new List<IPlayerBoxMoveActions>();
    private readonly InputAction m_PlayerBoxMove_Move;
    public struct PlayerBoxMoveActions
    {
        private @PlayerInputSystem m_Wrapper;
        public PlayerBoxMoveActions(@PlayerInputSystem wrapper) { m_Wrapper = wrapper; }
        public InputAction @Move => m_Wrapper.m_PlayerBoxMove_Move;
        public InputActionMap Get() { return m_Wrapper.m_PlayerBoxMove; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(PlayerBoxMoveActions set) { return set.Get(); }
        public void AddCallbacks(IPlayerBoxMoveActions instance)
        {
            if (instance == null || m_Wrapper.m_PlayerBoxMoveActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_PlayerBoxMoveActionsCallbackInterfaces.Add(instance);
            @Move.started += instance.OnMove;
            @Move.performed += instance.OnMove;
            @Move.canceled += instance.OnMove;
        }

        private void UnregisterCallbacks(IPlayerBoxMoveActions instance)
        {
            @Move.started -= instance.OnMove;
            @Move.performed -= instance.OnMove;
            @Move.canceled -= instance.OnMove;
        }

        public void RemoveCallbacks(IPlayerBoxMoveActions instance)
        {
            if (m_Wrapper.m_PlayerBoxMoveActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IPlayerBoxMoveActions instance)
        {
            foreach (var item in m_Wrapper.m_PlayerBoxMoveActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_PlayerBoxMoveActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public PlayerBoxMoveActions @PlayerBoxMove => new PlayerBoxMoveActions(this);
    public interface IPlayerBoxMoveActions
    {
        void OnMove(InputAction.CallbackContext context);
    }
}
