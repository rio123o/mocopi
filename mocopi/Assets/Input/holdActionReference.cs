//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.11.2
//     from Assets/Input/holdActionReference.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @HoldActionReference: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @HoldActionReference()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""holdActionReference"",
    ""maps"": [
        {
            ""name"": ""HoldAction"",
            ""id"": ""7da9da58-a45b-41e5-ad04-66cffe611ebd"",
            ""actions"": [
                {
                    ""name"": ""Push"",
                    ""type"": ""Button"",
                    ""id"": ""0fe3c9be-9276-4d32-9372-8449ba20eee5"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""a4b13f21-533d-4925-a84d-13ca05a5041b"",
                    ""path"": ""<Keyboard>/p"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Push"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // HoldAction
        m_HoldAction = asset.FindActionMap("HoldAction", throwIfNotFound: true);
        m_HoldAction_Push = m_HoldAction.FindAction("Push", throwIfNotFound: true);
    }

    ~@HoldActionReference()
    {
        UnityEngine.Debug.Assert(!m_HoldAction.enabled, "This will cause a leak and performance issues, HoldActionReference.HoldAction.Disable() has not been called.");
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // HoldAction
    private readonly InputActionMap m_HoldAction;
    private List<IHoldActionActions> m_HoldActionActionsCallbackInterfaces = new List<IHoldActionActions>();
    private readonly InputAction m_HoldAction_Push;
    public struct HoldActionActions
    {
        private @HoldActionReference m_Wrapper;
        public HoldActionActions(@HoldActionReference wrapper) { m_Wrapper = wrapper; }
        public InputAction @Push => m_Wrapper.m_HoldAction_Push;
        public InputActionMap Get() { return m_Wrapper.m_HoldAction; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(HoldActionActions set) { return set.Get(); }
        public void AddCallbacks(IHoldActionActions instance)
        {
            if (instance == null || m_Wrapper.m_HoldActionActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_HoldActionActionsCallbackInterfaces.Add(instance);
            @Push.started += instance.OnPush;
            @Push.performed += instance.OnPush;
            @Push.canceled += instance.OnPush;
        }

        private void UnregisterCallbacks(IHoldActionActions instance)
        {
            @Push.started -= instance.OnPush;
            @Push.performed -= instance.OnPush;
            @Push.canceled -= instance.OnPush;
        }

        public void RemoveCallbacks(IHoldActionActions instance)
        {
            if (m_Wrapper.m_HoldActionActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IHoldActionActions instance)
        {
            foreach (var item in m_Wrapper.m_HoldActionActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_HoldActionActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public HoldActionActions @HoldAction => new HoldActionActions(this);
    public interface IHoldActionActions
    {
        void OnPush(InputAction.CallbackContext context);
    }
}
